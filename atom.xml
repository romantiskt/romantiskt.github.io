<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rolan的Android之旅</title>
  <icon>https://www.gravatar.com/avatar/b0a2c88b3d0def26b9fac747fb36dd1f</icon>
  <subtitle>读万卷书，行万里路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-11T05:05:32.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>romantiskt</name>
    <email>wangyangRx@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从源代码编译React Native</title>
    <link href="http://yoursite.com/2018/03/25/%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91React%20Native/"/>
    <id>http://yoursite.com/2018/03/25/从源代码编译React Native/</id>
    <published>2018-03-25T02:36:00.000Z</published>
    <updated>2018-04-11T05:05:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从源代码编译React-Native"><a href="#从源代码编译React-Native" class="headerlink" title="从源代码编译React Native"></a>从源代码编译React Native</h4><ul><li>环境准备</li></ul><ol><li>Android SDK version 23 (非必须)</li><li>SDK build tools version 23.0.1 (非必须)</li><li>Android Support Repository &gt;= 17</li><li>Android NDK(必须android-ndk-r10e)</li></ol><hr><ul><li>ndk安装</li></ul><p><a href="http://dl.google.com/android/ndk/android-ndk-r10e-darwin-x86_64.bin" target="_blank" rel="external">android-ndk-r10e下载链接</a></p><ol><li>chmod a+x android-ndk-r10e-darwin-x86_64.bin （申请权限）</li><li>./android-ndk-r10e-darwin-x86_64.bin (切勿用工具解压)</li><li><p>指定ndk路径，打开.bash_profile  输入</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NDK_ROOT=/Users/wangyang/sdk/android-ndk-r10e</div><div class="line">export PATH=$PATH:$NDK_ROOT</div></pre></td></tr></table></figure></li><li><p>source .bash_profile 应用</p></li><li><p>检查ndk是否配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">进入： /Users/wangyang/sdk/android-ndk-r10e/samples/hello-jni </div><div class="line">执行 ndk-build  正常编译则表示配置成功</div><div class="line">在project structure中指定ndk的路径</div><div class="line">/Users/wangyang/sdk/android-ndk-r10e</div></pre></td></tr></table></figure></li></ol><hr><ul><li>项目文件修改</li></ul><ol><li><p>project中 build.gradle添加如下</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">classpath &apos;de.undercouch:gradle-download-task:3.1.2&apos;  //此步骤马上执行sync,不然接下来可能会报错</div></pre></td></tr></table></figure></li><li><p>修改settings.gradle</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">include &apos;:ReactAndroid&apos;</div><div class="line">project(&apos;:ReactAndroid&apos;).projectDir = new File(settingsDir, &apos;.  ./rn/node_modules/react-native/ReactAndroid&apos;)</div></pre></td></tr></table></figure></li></ol><ol><li><p>app build.gradle 修改</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies&#123;</div><div class="line">       api project(&apos;:ReactAndroid&apos;)</div><div class="line">     此处需要注释掉所有测试相关的依赖</div><div class="line">    &#125;</div><div class="line">configurations.all &#123;</div><div class="line">           exclude group: &apos;com.facebook.react&apos;, module: &apos;react-native&apos;</div><div class="line">     &#125;</div></pre></td></tr></table></figure></li></ol><ol><li><p>ReactAndroid 项目修改</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.移动与ReactAndroid 同级的 ReactCommon到ReactAndroid（此步可有可无）</div><div class="line">修改 build.gradle &quot;REACT_COMMON_DIR=$projectDir/../ReactCommon&quot; 为&quot;REACT_COMMON_DIR=$projectDir/ReactCommon&quot;,（有两处需修改）</div></pre></td></tr></table></figure></li><li><p>app第三方本地依赖修改</p></li></ol><ul><li><p>注销掉原来的react-native 依赖</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">opensourcelibrary moudle中</div><div class="line">//api &apos;com.facebook.react:react-native:+&apos;</div></pre></td></tr></table></figure></li><li><p>第三方本地引入依赖修改 </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">com.horcrux.svg 此包整个从组件库中移入主项目中，不然会报找不到react相关的包</div></pre></td></tr></table></figure></li></ul><h4 id="androidStudio-3-0的兼容处理"><a href="#androidStudio-3-0的兼容处理" class="headerlink" title="androidStudio 3.0的兼容处理"></a>androidStudio 3.0的兼容处理</h4><ul><li><p>修改前(ReactAndroid/release.gradle)</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def getRepositoryUrl() &#123;</div><div class="line">          return hasProperty(&apos;repositoryUrl&apos;) ? property(&apos;repositoryUrl&apos;) : &apos;https://oss.sonatype .org/service/local/staging/deploy/maven2/&apos;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">def getRepositoryUsername() &#123;</div><div class="line">          return hasProperty(&apos;repositoryUsername&apos;) ? property(&apos;repositoryUsername&apos;) : &apos;&apos;</div><div class="line">      &#125;</div><div class="line">def getRepositoryPassword() &#123;</div><div class="line">          return hasProperty(&apos;repositoryPassword&apos;) ? property(&apos;repositoryPassword&apos;) : &apos;&apos;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></li><li><p>修改后</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">def getRepositoryUrl() &#123;</div><div class="line">          return findProperty(&apos;repositoryUrl&apos;) != null ? property(&apos;repositoryUrl&apos;) : &apos;https://oss.sonatype.org/service/local/staging/deploy/maven2/&apos;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">def getRepositoryUsername() &#123;</div><div class="line">          return findProperty(&apos;repositoryUsername&apos;) !=null ? property(&apos;repositoryUsername&apos;) : &apos;&apos;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">def getRepositoryPassword() &#123;</div><div class="line">          return findProperty(&apos;repositoryPassword&apos;) != null ? property(&apos;repositoryPassword&apos;) : &apos;&apos;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></li></ul><h4 id="网络耗时任务的处理"><a href="#网络耗时任务的处理" class="headerlink" title="网络耗时任务的处理"></a>网络耗时任务的处理</h4><h5 id="下载的文件放入-ReactAndroid-build-downloads下"><a href="#下载的文件放入-ReactAndroid-build-downloads下" class="headerlink" title="下载的文件放入 ReactAndroid/build/downloads下"></a>下载的文件放入 ReactAndroid/build/downloads下</h5><p><a href="https://github.com/react-native-community/boost-for-react-native/releases/download/v1.63.0-0/boost_1_63_0.tar.gz" target="_blank" rel="external">boost下载</a></p><ul><li><p>正常情况下只需要下载boost，其它的在编译时自动下载，如果下载不成功就采取手动下载，链接的资源如下</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">     https://github.com/react-native-community/boost-for-react-native/releases/download/v1.63.0-0/boost_1_63_0.tar.gz</div><div class="line">     https://github.com/google/double-conversion/archive/v1.1.1.tar.gz</div><div class="line">     https://github.com/facebook/folly/archive/v2016.09.26.00.tar.gz</div><div class="line">     https://github.com/google/glog/archive/v0.3.3.tar.gz</div><div class="line">     https://raw.githubusercontent.com/WebKit/webkit/38b15a3ba3c1b0798f2036f7cea36ffdc096202e/Source/JavaScriptCore/API/</div><div class="line">                头文件只下载此数组中的[&apos;JavaScript.h&apos;, &apos;JSBase.h&apos;, &apos;JSContextRef.h&apos;, &apos;JSObjectRef.h&apos;, &apos;JSRetainPtr.h&apos;, &apos;JSStringRef.h&apos;, &apos;JSValueRef.h&apos;, &apos;WebKitAvailability.h&apos;]</div><div class="line">                 下载的头文件放入 downloads/jsc目录下  </div><div class="line">    ``` </div><div class="line">####其它踩坑指南</div><div class="line">*  ReactNative 暂时还不支持新版的 api依赖等方式，所以需要保持 compile</div></pre></td></tr></table></figure><p> //下面这个任务会不通过，因为此任务会去compile中复制一些文件过来</p><pre><code> task prepareJSC(dependsOn: dependenciesPath ? [] : [downloadJSCHeaders]) &lt;&lt; {   copy {     from zipTree(configurations.compile.fileCollection { dep -&gt; dep.name == &apos;android-jsc&apos;  }.singleFile)     from dependenciesPath ? &quot;$dependenciesPath/jsc-headers&quot; : {downloadJSCHeaders.dest}     from &apos;src/main/jni/third-party/jsc/Android.mk&apos;        include &apos;jni/**/*.so&apos;, &apos;*.h&apos;, &apos;Android.mk&apos;        filesMatching(&apos;*.h&apos;, { fname -&gt; fname.path = &quot;JavaScriptCore/${fname.path}&quot;})       into &quot;$thirdPartyNdkDir/jsc&quot;;  }}</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*  React 不支持 D8的merge dex工具</div><div class="line">  需要关闭此属性，在project/gradle.properties中</div></pre></td></tr></table></figure><p>  android.enableD8=false  默认就是关闭<br>  ```</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;从源代码编译React-Native&quot;&gt;&lt;a href=&quot;#从源代码编译React-Native&quot; class=&quot;headerlink&quot; title=&quot;从源代码编译React Native&quot;&gt;&lt;/a&gt;从源代码编译React Native&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git 常见命令及其操作</title>
    <link href="http://yoursite.com/2017/04/10/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/04/10/Git常用命令/</id>
    <published>2017-04-10T15:16:00.000Z</published>
    <updated>2018-04-11T03:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h5 id="基本Git-命令"><a href="#基本Git-命令" class="headerlink" title="基本Git 命令"></a>基本Git 命令</h5><pre><code>1. 配置Git    git config --global user.name &quot;YourName&quot;    git config --global user.email &quot;email@example.com&quot;2. 创建版本库    git init3. 查看当前版本库的状态    git status4. 查看当前窗口的所有log    git log --pretty=oneline5. 查看历史log    git reflog6. 添加文件到暂存区    git add readme.txt    git add .                                一次添加所有的文件    7. 提交修改    git commit -m &quot;example commit&quot;8. 版本回退    git reset --hard 23230(commit id)       回退到指定版本           git reset --hard HEAD^                  回退到上一个版本    git reset --hard HEAD~8                 回退到前8的那个版本9. 撤销修改    git checkout -- readme.md10. 撤销暂存区(git add)的修改，重新放回工作区    git reset HEAD readme.txt11. 从版本库中删除文件    git rm test.txt12. 对比不同，查看修改的内容    git diff readme.txt13. 删除已经被提交的文件（本地加入ignore，需要删除远程仓库中的）    git rm -r build.xml                        从版本库中删除（单个文件）    git rm -r build/                        从版本库中删除（整个build目录）    git commit -m &quot;ignore commit files&quot;        提交    git push origin master                    推送到远程仓库14.回滚代码    git checkout -b sm v4.9.7      本地建个sm分支跟踪 v4.9.7 tag    git push -f origin sm:master   强制把master回滚到 sm 分支（相当于回滚到 4.9.7tag）    git branch -D master       删除并重建本地master    git checkout -b master --track origin/master</code></pre><h5 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h5><pre><code>1. 使用Coding创建一个远程仓库2. 运行命令    git remote add origin https://github.com/googlesamples/android-ndk.git3. 将本地库的所有内容推送到远程仓库上    git push -u origin master    （初次提交）    git push origin master        （初次提交后再次提交）4. 从远程仓库克隆    git clone https://github.com/googlesamples/android-ndk.git        （远程 master分支）    git clone -b dev https://github.com/googlesamples/android-ndk.git    （远程 dev分支）</code></pre><h5 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h5><pre><code>1. 创建分支    git branch dev2. 切换分支    git checkout dev3. 创建并切换分支    git checkout -b dev4. 查看当前分支    git branch5. 删除分支    git branch -d dev6. 推送本地的分支到服务器    git push origin dev7. 查看本地与远程的所有分支    git branch -a8. 删除远程分支    git push origin --delete dev9. 删除远程tag    git push origin --delete tag tag_1</code></pre><h5 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h5><pre><code>1. 使用 git merge dev 合并分支代码时，Git会使用&lt;&lt;&lt;&lt;&lt;&lt;,======,&gt;&gt;&gt;&gt;&gt;&gt;标记处不同分支的内容，待我们手动合并冲突后，保存之后重新提交即可完成分支合并2. 使用命令查看分支合并图   git log --graph</code></pre><h5 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h5><p> <img src="manage_branch.png" alt="分支管理策略"></p><pre><code>1. 通常，合并分支时，如果可能，Git会使用Fast forward模式，但在这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，从分支历史就可以看出分支信息。2. 使用如下命令禁用Fast forward模式    git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></pre><h5 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h5><pre><code>1. 接到修复代号101bug的任务，创建一个分支issue-101来修复它。但是，当前正在dev上进行的工作还没有提交。    存储工作现场，存储之后 git status将没有内容，即工作区是干净的。    git stash    存储工作现场2. 新建分支issue-101修复bug，并合并到master分支。    git checkout -b issue-101     git add motifity.java    git commit motiffity.java    git checkout master    git merge --no-ff -m &quot;merged bug fix 101&quot; issue-101    git branch -d issue-1013. 切回dev分支干活，并恢复现场    git stash list      查看刚才的工作现场    git stash apply     恢复最近的工作现场    git stash drop      删除存储的工作现场4. 一步恢复工作现场，恢复的同时把stash内容也删了    git stash pop     5. stash的其它命令    git stash apply stash@{0}    恢复指定的工作现场    git stash show -p stash@{0}   对比指定工作现场与当前所发生的改变    git stash show -p            对比最近工作现场与当前所发生的改变    git stash save xxxxx         带有指定信息的存储工作现场    git stash drop  stash@{0}    抛弃指定的工作现场    gut stash branch develop_test  以当前存储的工作现场创建并切换到分支 develop_test</code></pre><h5 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h5><pre><code>1. 创建一个分支，用于开发下一代星际飞船    git checkout -b feature-vulcan2. 飞船开发完成，切换到dev分支准备合并    git add vulcan    git commit -m &quot;feature vulcan&quot;    git checkout dev3. 经费不足，新功能取消    git branch -d feature-vulcan    (失败，未经合并的分支)    git branch -D feature-vulcan    强制删除</code></pre><h5 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h5><pre><code>1. 查看远程库信息    git remote    git remote -v       查看更详细的信息(Git库远程地址)2. 推送分支    git push origin master    git push origin dev    master分支是主分支，因此需要时刻与远程同步；    dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；    bug分支只用于在本地修复bug，就没有必要推送到远程了，除非老板要看你每周到底修复了几个bug；    feature分支是否推送到远程，取决于你是否和你的小伙伴合作在上面开发3. 抓取（克隆）分支    git clone https://github.com/googlesamples/android-ndk.git    默认情况下，clone下来时，本地只能看到master分支    需要从dev分支开发，在本地创建dev分支：    git checkout -b dev origin/dev4. 指定本地dev分支与远程origin/dev分支的链接    git branch --set-upstream dev origin/dev5. 从服务器拉取最新内容    git pull</code></pre><h5 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h5><pre><code>1. 创建标签    git tag v1.02. 查看所有标签    git tag3. 从某次提交创建标签    git tag v0.9 822834. 带说明文字    git tag -a v0.1 -m &quot;version 0.1 released&quot; 2323            -a 指定标签名            -m 指定说明文字    git show v0.1   查看说明文字5. 删除标签    git tag -d v1.06. 推送标签到远程    git push origin v1.07. 从远程库删除    git push origin :refs/tags/v1.0</code></pre><h5 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h5><pre><code>1. 忽略掉Git工作目录中不需要提交的文件，如.class文件。创建.gitignore文件即可2. 某些时候，无法添加文件到Git    git add -f demo.java        -f 强制添加3. 如果.gitignore写的有问题，使用命令检查     git check-ignore -v demo.java       该命令会告知.gitignore哪里写得有问题</code></pre><h5 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h5><pre><code>1. 避免每次pull/push都输入账户名与密码。在config文件中加入如下命令    [credential]            helper = store2. Git默认对大小写不明感，加入如下配置命令不忽略大小写    git config core.ignorecase false  </code></pre><p>感谢好朋友小滔滔无私的付出，文章大部分是引用自他：<a href="https://github.com/chentao7v" target="_blank" rel="external">他的Github</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h5 id=&quot;基本Git-命令&quot;&gt;&lt;a href=&quot;#基本Git-命令&quot; class=&quot;headerlink&quot; title=&quot;基本Git 命令&quot;&gt;&lt;/a&gt;基本Git 命令&lt;/h5&gt;&lt;pre&gt;&lt;code&gt;1. 配置Git
    git config --global 
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/09/25/hello-world/"/>
    <id>http://yoursite.com/2016/09/25/hello-world/</id>
    <published>2016-09-25T02:36:00.000Z</published>
    <updated>2018-04-11T04:24:52.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>想开通blog已久，无奈懒癌缠身，正值周一疲劳之际，得空产出这么一个东东，我一直有诗人一样的情怀，常不禁遐想自己漫步于两岸花丛绿地间，观虫草走兽，听山谷青翠空灵，然事与愿违，这一切都活在我的梦里。</p><p>好了，正文开始：</p><p>这是我个人的第一篇blog,相信应该，可能也不会是最后一篇(<em>^__^</em>)，我打算将生活中的有趣的事，以及学习中比较深刻的见解在这里记录下来。</p><p>首先，得给自己立一个小目标：</p><ul><li>C++原生游戏开发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.java与native层互调</div><div class="line">2.c++事件响应模型</div><div class="line">3.3D立体渲染</div></pre></td></tr></table></figure><ul><li>es5,6</li><li><p>React Native混合开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.node基础</div><div class="line">2.es5,6基础，特性</div><div class="line">3.react基础</div><div class="line">4.reduce及其事件模型</div></pre></td></tr></table></figure></li><li><p>组件化探索</p></li><li>Android源码分析</li><li>Java web</li><li>python把玩</li><li>区块链挖掘</li></ul><hr><p>可以看到，要成为一名合格的程序员，还有很长的路要走，况且身为一名Android开发，更是感觉前路遍布荆棘（ps:如果你认为Android很简单，那么证明你还没入门）</p><p>梦想是要有的，万一实现了呢，但是理想也要与现实着地，所以你能看到我列出的目录中，都是时下非常热门的技术和方向，人最不可避免的就是自己的惰性，高中时期在那种大环境下才能做到勉强自律，更不用提毕业工作后面对生活的压力，及其它因素的诱惑。问题既然摆在那，很少有人能有勇气和恒心去解决问题，因为这不是短期投资，你很难在一天或者是一周后看到回报，温水煮青蛙就是这个理，我们务必时时鞭策自己，告诉自己在前面等待自己的是多么美好的未来，对自己痛苦，就是成全自己。</p><p>如果你解决一个问题，你就领先很多人，解决越多问题，你的生活也就会过得更滋润。所以我一直标榜自己是一个“解决问题的人”，但这同时让我失去了创造性。有得有失这不可避免，但是我们要尽量做到在大趋势下不犯错。</p><ul><li><p>总结</p><p>   一不小心立了很多大方向，本人工作还算比较忙，所以可能进度比较慢，但是，你想的没错，我就是喜欢暴饮暴食，一口吃成一个胖子的何许人hahaa…,不过凡事都要有重点，先后之分，所以近期我会在这个大方向内出一篇文章，至于具体讲什么，还请下回分解。</p></li><li><p>下面是博客相关的资料</p><p>  Hexo官方网站：</p><p>  <a href="https://hexo.io/" target="_blank" rel="external">https://hexo.io/</a></p><p>  Hexo中文文档：</p><p>  <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/index.html</a></p><p>  博客搭建过程</p><p>  <a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="external">https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/</a></p><p>  新增文章：</p><pre><code>在source/目录下建立 xx.md   然后   hexo generate --deploy  即可自动生成及其上传GitHub</code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;想开通blog已久，无奈懒癌缠身，正值周一疲劳之际，得空产出这么一个东东，我一直有诗人一样的情怀，常不禁遐想自己漫步于两岸花丛绿地间，观虫草走兽，听山谷青翠空灵，然事与愿违，这一切都活在我的梦里。&lt;/p&gt;
&lt;p&gt;好了，正文开始：&lt;/p&gt;
&lt;p&gt;这是我个人的第一篇b
      
    
    </summary>
    
    
      <category term="技术" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
